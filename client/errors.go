package client

// Error represents an error from the client package.  It implements net.Error,
// and in particular the err.Temporary() function is useful for distinguishing
// temporary, retryable errors from permanent errors.
type Error struct {
	errString string
	reconnect bool
	timeout   bool
	auth      bool
}

func (c Error) Error() string {
	return c.errString
}

func (c Error) Temporary() bool {
	return c.reconnect
}

func (c Error) Timeout() bool {
	return c.timeout
}

var (
	// ErrRetryTimedOut is returned when Reconnect() time exceeds MaxElapsedTime.
	ErrRetryTimedOut = Error{timeout: true, errString: "retry timed out"}

	// ErrBadToken is returned when a usable token can not be generated by the authorizer.
	ErrBadToken = Error{errString: "bad auth token"}

	// ErrRetryFailed is returned when retry attempts fail.
	ErrRetryFailed = Error{errString: "retry failed"}

	// ErrClientReconnecting is returned when the connection is reconnecting.
	// This is a temporary error, and callers should retry the operation after
	// a delay.
	ErrClientReconnecting = Error{errString: "client reconnecting", reconnect: true}

	// ErrClientClosed is returned from an Accept call when the client is closed.
	ErrClientClosed = Error{errString: "client closed"}

	// ErrAuthFailed is returned when authentication with the proxy fails
	ErrAuthFailed = Error{errString: "auth failed", auth: true}
)
